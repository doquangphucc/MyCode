document.addEventListener('DOMContentLoaded', () => {
    // DOM Elements
    const countdownArea = document.getElementById('countdownArea');
    const messageArea = document.getElementById('messageArea');
    const choicesArea = document.getElementById('choicesArea');
    const resultArea = document.getElementById('resultArea');
    const leaveRoomBtn = document.getElementById('leaveRoomBtn');
    const player1NameDisplay = document.getElementById('player1Name');
    const player1ChoiceDisplay = document.getElementById('player1ChoiceDisplay');
    const player2NameDisplay = document.getElementById('player2Name');
    const player2ChoiceDisplay = document.getElementById('player2ChoiceDisplay');
    const choiceButtons = {
        rock: document.getElementById('rock'),
        paper: document.getElementById('paper'),
        scissors: document.getElementById('scissors')
    };

    // Game state
    let socket;
    let roomId;
    let currentUserId;
    let username;
    let myPlayerNumber;
    let choiceTimer;
    let playerMadeChoiceThisRound = false;

    // --- INITIALIZATION ---
    function initGame() {
        currentUserId = localStorage.getItem('userId');
        username = localStorage.getItem('username');
        if (!currentUserId) {
            alert("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
            window.location.href = 'login.html';
            return;
        }

        const params = new URLSearchParams(window.location.search);
        roomId = params.get('roomId');
        if (!roomId) {
            alert("Kh√¥ng t√¨m th·∫•y ID ph√≤ng. Quay l·∫°i s·∫£nh.");
            window.location.href = 'index.html';
            return;
        }

        connectWebSocket();
    }

    // --- WEBSOCKET CONNECTION ---
    function connectWebSocket() {
        // Thay 'ws://localhost:8080' b·∫±ng ƒë·ªãa ch·ªâ IP c·ªßa m√°y ch·ªß n·∫øu c·∫ßn
        socket = new WebSocket('ws://localhost:8080');

        socket.onopen = () => {
            console.log('WebSocket Connected');
            messageArea.textContent = 'ƒê√£ k·∫øt n·ªëi t·ªõi ph√≤ng game...';
            // G·ª≠i th√¥ng tin tham gia ph√≤ng l√™n server
            socket.send(JSON.stringify({
                type: 'join_game',
                roomId: roomId,
                userId: currentUserId,
                username: username
            }));
        };

        socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log('Message from server:', data);
            handleServerMessage(data);
        };

        socket.onclose = () => {
            console.log('WebSocket Disconnected');
            messageArea.textContent = 'M·∫•t k·∫øt n·ªëi t·ªõi server. Vui l√≤ng t·∫£i l·∫°i trang ho·∫∑c quay v·ªÅ s·∫£nh.';
        };

        socket.onerror = (error) => {
            console.error('WebSocket Error:', error);
            messageArea.textContent = 'L·ªói k·∫øt n·ªëi WebSocket.';
        };
    }

    // --- MESSAGE HANDLING ---
    function handleServerMessage(data) {
        switch (data.type) {
            case 'room_full':
                alert('Ph√≤ng ƒë√£ ƒë·∫ßy ho·∫∑c c√≥ l·ªói x·∫£y ra. Quay l·∫°i s·∫£nh.');
                window.location.href = 'index.html';
                break;
            case 'game_info':
                updatePlayerInfo(data.players);
                myPlayerNumber = data.yourPlayerNumber;
                if(data.players.length < 2) {
                    countdownArea.textContent = "ƒêang ch·ªù ng∆∞·ªùi ch∆°i th·ª© 2...";
                }
                break;
            case 'player_joined':
                updatePlayerInfo(data.players);
                 countdownArea.textContent = "Chu·∫©n b·ªã b·∫Øt ƒë·∫ßu!";
                break;
            case 'countdown':
                countdownArea.textContent = data.value;
                if (data.value === "B·∫Øt ƒë·∫ßu!") {
                    messageArea.textContent = 'H√£y ch·ªçn trong 5 gi√¢y!';
                    resetForNewRound();
                    startChoiceTimer(5);
                }
                break;
            case 'game_result':
                hideChoices();
                displayChoices(data.choices);
                displayResult(data.winnerId);
                messageArea.textContent = 'V√°n ƒë·∫•u k·∫øt th√∫c. S·∫Ω quay v·ªÅ s·∫£nh sau 5 gi√¢y.';
                setTimeout(() => window.location.href = 'index.html', 5000);
                break;
            case 'opponent_choice_made':
                if (messageArea.textContent.includes('H√£y ch·ªçn')) {
                    messageArea.textContent = 'ƒê·ªëi th·ªß ƒë√£ ch·ªçn. Ch·ªù b·∫°n...';
                }
                break;
            case 'opponent_left':
                alert('ƒê·ªëi th·ªß ƒë√£ r·ªùi ph√≤ng. Tr·∫≠n ƒë·∫•u k·∫øt th√∫c.');
                window.location.href = 'index.html';
                break;
            case 'error':
                alert(`L·ªói t·ª´ server: ${data.message}`);
                break;
        }
    }
    
    function updatePlayerInfo(players){
        const player1 = players.find(p => p.playerNumber === 1);
        const player2 = players.find(p => p.playerNumber === 2);
        
        player1NameDisplay.textContent = player1 ? player1.username : 'Ng∆∞·ªùi ch∆°i 1';
        player2NameDisplay.textContent = player2 ? player2.username : 'ƒêang ch·ªù...';
    }

    // --- UI & GAME FLOW ---
    function resetForNewRound() {
        choicesArea.style.display = 'block';
        Object.values(choiceButtons).forEach(btn => btn.disabled = false);
        player1ChoiceDisplay.textContent = '?';
        player2ChoiceDisplay.textContent = '?';
        resultArea.textContent = '';
        playerMadeChoiceThisRound = false;
    }
    
    function hideChoices() {
        choicesArea.style.display = 'none';
    }

    function disableChoiceButtons() {
        Object.values(choiceButtons).forEach(btn => btn.disabled = true);
    }

    function startChoiceTimer(seconds) {
        let timeLeft = seconds;
        messageArea.textContent = `Ch·ªçn trong: ${timeLeft}s`;
        clearInterval(choiceTimer);
        choiceTimer = setInterval(() => {
            timeLeft--;
            if (timeLeft >= 0) {
                messageArea.textContent = `Ch·ªçn trong: ${timeLeft}s`;
            }
            if (timeLeft < 0) {
                clearInterval(choiceTimer);
                if (!playerMadeChoiceThisRound) {
                    messageArea.textContent = 'H·∫øt gi·ªù ch·ªçn!';
                    disableChoiceButtons();
                    socket.send(JSON.stringify({ type: 'player_choice', choice: null, roomId: roomId, userId: currentUserId }));
                }
            }
        }, 1000);
    }

    Object.values(choiceButtons).forEach(button => {
        button.addEventListener('click', () => {
            if (socket && socket.readyState === WebSocket.OPEN && !playerMadeChoiceThisRound) {
                const choice = button.dataset.choice;
                socket.send(JSON.stringify({ type: 'player_choice', choice: choice, roomId: roomId, userId: currentUserId }));
                messageArea.textContent = `B·∫°n ƒë√£ ch·ªçn ${translateChoice(choice)}. Ch·ªù ƒë·ªëi th·ªß...`;
                disableChoiceButtons();
                clearInterval(choiceTimer);
                playerMadeChoiceThisRound = true;
            }
        });
    });

    function displayChoices(choices) {
        if (choices) {
            player1ChoiceDisplay.textContent = translateChoice(choices.player1) || '?';
            player2ChoiceDisplay.textContent = translateChoice(choices.player2) || '?';
        }
    }

    function displayResult(winnerId) {
        if (winnerId === 'draw') {
            resultArea.textContent = `ü§ù H√íA! ü§ù`;
            resultArea.style.color = 'blue';
        } else if (winnerId === currentUserId) {
            resultArea.textContent = `üéâ B·∫†N TH·∫ÆNG! üéâ`;
            resultArea.style.color = 'green';
        } else {
            resultArea.textContent = `üò≠ B·∫†N THUA! üò≠`;
            resultArea.style.color = 'red';
        }
    }

    function translateChoice(choice) {
        const choiceMap = { 'rock': '‚úä B√∫a', 'paper': 'üñêÔ∏è Bao', 'scissors': '‚úåÔ∏è K√©o' };
        return choiceMap[choice] || choice;
    }

    leaveRoomBtn.addEventListener('click', () => {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.close();
        }
        window.location.href = 'index.html';
    });

    initGame();
});
