document.addEventListener('DOMContentLoaded', () => {
    const countdownArea = document.getElementById('countdownArea');
    const messageArea = document.getElementById('messageArea');
    const choicesArea = document.getElementById('choicesArea');
    const resultArea = document.getElementById('resultArea');
    const leaveRoomBtn = document.getElementById('leaveRoomBtn');
    const player1NameDisplay = document.getElementById('player1Name');
    const player1ChoiceDisplay = document.getElementById('player1ChoiceDisplay');
    const player2NameDisplay = document.getElementById('player2Name');
    const player2ChoiceDisplay = document.getElementById('player2ChoiceDisplay');

    const choiceButtons = {
        rock: document.getElementById('rock'),
        paper: document.getElementById('paper'),
        scissors: document.getElementById('scissors')
    };

    let socket;
    let roomId;
    let currentUserId; // S·∫Ω l·∫•y t·ª´ localStorage
    let myPlayerNumber; // 1 ho·∫∑c 2

    function initGame() {
        currentUserId = localStorage.getItem('userId');
        const username = localStorage.getItem('username');
        if (!currentUserId) {
            alert("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
            window.location.href = 'login.html'; // Ho·∫∑c trang s·∫£nh
            return;
        }

        const params = new URLSearchParams(window.location.search);
        roomId = params.get('roomId');
        if (!roomId) {
            alert("Kh√¥ng t√¨m th·∫•y ID ph√≤ng. Quay l·∫°i s·∫£nh.");
            window.location.href = 'lobby.html';
            return;
        }

        // Thay 'ws://localhost:8080' b·∫±ng URL WebSocket server c·ªßa b·∫°n
        // V√≠ d·ª•: n·∫øu b·∫°n d√πng Ratchet, n√≥ th∆∞·ªùng ch·∫°y tr√™n m·ªôt port kh√°c.
        socket = new WebSocket('ws://localhost:8080'); // ƒê·ªäA CH·ªà WEBSOCKET SERVER

        socket.onopen = () => {
            console.log('WebSocket Connected');
            messageArea.textContent = 'ƒê√£ k·∫øt n·ªëi t·ªõi ph√≤ng game...';
            // G·ª≠i th√¥ng tin tham gia ph√≤ng l√™n server
            socket.send(JSON.stringify({
                type: 'join_game',
                roomId: roomId,
                userId: currentUserId,
                username: username
            }));
        };

        socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log('Message from server:', data);

            switch (data.type) {
                case 'room_full':
                    alert('Ph√≤ng ƒë√£ ƒë·∫ßy ho·∫∑c c√≥ l·ªói x·∫£y ra. Quay l·∫°i s·∫£nh.');
                    window.location.href = 'lobby.html';
                    break;
                case 'game_info': // Server g·ª≠i th√¥ng tin ban ƒë·∫ßu v·ªÅ ph√≤ng v√† ng∆∞·ªùi ch∆°i
                    myPlayerNumber = data.yourPlayerNumber;
                    player1NameDisplay.textContent = data.player1.username || 'Ng∆∞·ªùi ch∆°i 1';
                    if (data.player2) {
                        player2NameDisplay.textContent = data.player2.username || 'Ng∆∞·ªùi ch∆°i 2';
                    } else {
                        player2NameDisplay.textContent = 'ƒêang ch·ªù...';
                    }
                    if (data.player1 && data.player2) {
                        countdownArea.textContent = "Chu·∫©n b·ªã b·∫Øt ƒë·∫ßu!";
                    } else {
                        countdownArea.textContent = "ƒêang ch·ªù ng∆∞·ªùi ch∆°i th·ª© 2...";
                    }
                    break;
                case 'player_joined':
                    if (data.playerNumber === 1) {
                        player1NameDisplay.textContent = data.username;
                    } else if (data.playerNumber === 2) {
                        player2NameDisplay.textContent = data.username;
                    }
                    countdownArea.textContent = "Chu·∫©n b·ªã b·∫Øt ƒë·∫ßu!";
                    break;
                case 'countdown':
                    countdownArea.textContent = data.value;
                    if (data.value === "B·∫Øt ƒë·∫ßu!") {
                        messageArea.textContent = 'H√£y ch·ªçn trong 5 gi√¢y!';
                        showChoices();
                        startChoiceTimer(5); // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c 5s ƒë·ªÉ ch·ªçn
                    }
                    break;
                case 'game_result':
                    hideChoices();
                    displayChoices(data.choices);
                    displayResult(data.winner, data.choices);
                    messageArea.textContent = 'V√°n ƒë·∫•u k·∫øt th√∫c. B·∫°n s·∫Ω ƒë∆∞·ª£c ƒë∆∞a v·ªÅ s·∫£nh sau gi√¢y l√°t.';
                    setTimeout(() => {
                        // T·ª± ƒë·ªông r·ªùi ph√≤ng sau khi xem k·∫øt qu·∫£
                        // Ho·∫∑c server c√≥ th·ªÉ t·ª± ƒë·ªông kick
                        window.location.href = 'lobby.html';
                    }, 5000); // 5 gi√¢y
                    break;
                case 'opponent_choice_made': // Th√¥ng b√°o ƒë·ªëi th·ªß ƒë√£ ch·ªçn (kh√¥ng ti·∫øt l·ªô l·ª±a ch·ªçn)
                    if (myPlayerNumber === 1 && data.playerNumber === 2 || myPlayerNumber === 2 && data.playerNumber === 1) {
                         messageArea.textContent = 'ƒê·ªëi th·ªß ƒë√£ ch·ªçn. Ch·ªù b·∫°n...';
                    }
                    break;
                case 'opponent_left':
                    alert('ƒê·ªëi th·ªß ƒë√£ r·ªùi ph√≤ng. Tr·∫≠n ƒë·∫•u k·∫øt th√∫c.');
                    window.location.href = 'lobby.html';
                    break;
                case 'error':
                    alert(`L·ªói t·ª´ server: ${data.message}`);
                    break;
            }
        };

        socket.onclose = () => {
            console.log('WebSocket Disconnected');
            messageArea.textContent = 'M·∫•t k·∫øt n·ªëi t·ªõi server. Vui l√≤ng th·ª≠ l·∫°i.';
            // C√≥ th·ªÉ th·ª≠ k·∫øt n·ªëi l·∫°i ho·∫∑c ƒëi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng
        };

        socket.onerror = (error) => {
            console.error('WebSocket Error:', error);
            messageArea.textContent = 'L·ªói k·∫øt n·ªëi WebSocket.';
        };
    }

    function showChoices() {
        choicesArea.style.display = 'block';
        Object.values(choiceButtons).forEach(btn => btn.disabled = false);
        player1ChoiceDisplay.textContent = '?';
        player2ChoiceDisplay.textContent = '?';
        resultArea.textContent = '';
    }

    function hideChoices() {
        choicesArea.style.display = 'none';
    }

    function disableChoiceButtons() {
        Object.values(choiceButtons).forEach(btn => btn.disabled = true);
    }

    let choiceTimer;
    function startChoiceTimer(seconds) {
        let timeLeft = seconds;
        messageArea.textContent = `Ch·ªçn trong: ${timeLeft}s`;
        clearInterval(choiceTimer); // X√≥a interval c≈© n·∫øu c√≥
        choiceTimer = setInterval(() => {
            timeLeft--;
            if (timeLeft >= 0) {
                messageArea.textContent = `Ch·ªçn trong: ${timeLeft}s`;
            }
            if (timeLeft < 0) {
                clearInterval(choiceTimer);
                messageArea.textContent = 'H·∫øt gi·ªù ch·ªçn!';
                disableChoiceButtons();
                // G·ª≠i l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh ho·∫∑c kh√¥ng ch·ªçn l√™n server n·∫øu ng∆∞·ªùi ch∆°i ch∆∞a ch·ªçn
                // Server s·∫Ω x·ª≠ l√Ω vi·ªác n√†y
                if (!playerMadeChoiceThisRound) {
                     socket.send(JSON.stringify({ type: 'player_choice', choice: null, roomId: roomId, userId: currentUserId }));
                }
            }
        }, 1000);
    }
    let playerMadeChoiceThisRound = false;

    Object.values(choiceButtons).forEach(button => {
        button.addEventListener('click', () => {
            if (socket && socket.readyState === WebSocket.OPEN) {
                const choice = button.dataset.choice;
                socket.send(JSON.stringify({ type: 'player_choice', choice: choice, roomId: roomId, userId: currentUserId }));
                messageArea.textContent = `B·∫°n ƒë√£ ch·ªçn ${translateChoice(choice)}. Ch·ªù ƒë·ªëi th·ªß...`;
                disableChoiceButtons();
                clearInterval(choiceTimer); // D·ª´ng timer khi ƒë√£ ch·ªçn
                playerMadeChoiceThisRound = true;
            }
        });
    });

    function displayChoices(choices) { // choices = { player1: 'rock', player2: 'paper' }
        if (choices) {
            player1ChoiceDisplay.textContent = translateChoice(choices.player1) || '?';
            player2ChoiceDisplay.textContent = translateChoice(choices.player2) || '?';
        }
    }

    function displayResult(winnerData, choices) { // winnerData = { winnerId: 'userId', text: 'B·∫°n th·∫Øng!' } ho·∫∑c null n·∫øu h√≤a
        if (winnerData) {
            if (winnerData.winnerId === currentUserId) {
                resultArea.textContent = `üéâ B·∫†N TH·∫ÆNG! üéâ`;
                resultArea.style.color = 'green';
            } else if (winnerData.winnerId === 'draw') {
                resultArea.textContent = `ü§ù H√íA! ü§ù`;
                resultArea.style.color = 'blue';
            } else {
                resultArea.textContent = `üò≠ B·∫†N THUA! üò≠`;
                resultArea.style.color = 'red';
            }
        } else { // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ winnerData r√µ r√†ng, c√≥ th·ªÉ l√† h√≤a ho·∫∑c l·ªói
             if (choices && choices.player1 && choices.player2 && choices.player1 === choices.player2) {
                resultArea.textContent = `ü§ù H√íA! ü§ù`;
                resultArea.style.color = 'blue';
            } else {
                resultArea.textContent = "Ch·ªù k·∫øt qu·∫£...";
                resultArea.style.color = 'black';
            }
        }
    }


    function translateChoice(choice) {
        switch (choice) {
            case 'rock': return '‚úä B√∫a';
            case 'paper': return 'üñêÔ∏è Bao';
            case 'scissors': return '‚úåÔ∏è K√©o';
            default: return choice; // Ho·∫∑c '?' n·∫øu kh√¥ng x√°c ƒë·ªãnh
        }
    }

    leaveRoomBtn.addEventListener('click', () => {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({ type: 'leave_game', roomId: roomId, userId: currentUserId }));
        }
        window.location.href = 'index.html'; // ƒêi·ªÅu h∆∞·ªõng ngay c·∫£ khi socket kh√¥ng m·ªü
    });

    // Kh·ªüi t·∫°o game khi trang ƒë∆∞·ª£c t·∫£i
    initGame();
});
